{"version":3,"file":"static/js/739.1ca2cee7.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm/useForm.js","components/Phonebook/ContactForm/initialState.js","webpack://react-homework-template/./src/components/Phonebook/ContactForm/contactForm.module.css?62c5","components/Phonebook/ContactForm/ContactForm.jsx","components/Phonebook/ContactList/ContactListItem.jsx","components/Phonebook/ContactList/ContactList.jsx","redux/contacts/filter/filter-selectors.js","components/Phonebook/Phonebook.jsx","pages/Phonebook/PhonebookPage.jsx","redux/contacts/items/items-selectors.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","webpack://react-homework-template/./src/components/Phonebook/ContactList/contactList.module.css?239b"],"sourcesContent":["import {useState} from \"react\";\nimport PropTypes from 'prop-types';\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;\n\nuseForm.defaultProps = {\n    onSubmit: () => {},\n}\n\nuseForm.propTypes = {\n    onSubmit: PropTypes.func,\n    target: PropTypes.object,\n}","const initialState = {\n    name: '',\n    number: '',\n    family: false,\n}\n\nexport default initialState;","// extracted by mini-css-extract-plugin\nexport default {\"phoneForm\":\"contactForm_phoneForm__fecZ5\",\"phoneInputName\":\"contactForm_phoneInputName__hiaPc\",\"phoneInputNumber\":\"contactForm_phoneInputNumber__4PF5a\",\"phoneInputLicence\":\"contactForm_phoneInputLicence__62fyl\",\"licenceText\":\"contactForm_licenceText__u6xqY\",\"phoneFormButton\":\"contactForm_phoneFormButton__FRxt2\"};","import { useMemo } from \"react\";\nimport useForm from './useForm';\nimport shortid from \"shortid\";\nimport PropTypes from 'prop-types';\nimport initialState from \"./initialState\";\n\nimport s from \"./contactForm.module.css\";\n\nconst ContactForm = ({onSubmit}) => {\n\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n\n    const nameId = useMemo(()=> shortid(), []);\n    const numberId = useMemo(()=> shortid(), []);\n    const familyId = useMemo(()=> shortid(), []);\n    \n    const {name, number, family} = state;\n    \n    return (\n        <form onSubmit={handleSubmit} className={s.phoneForm}>\n            <label htmlFor={nameId}>\n                Name\n                <input\n                    className={s.phoneInputName}\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    value={name}\n                    onChange={handleChange}\n                    id={nameId}\n                    required\n                />\n            </label>\n\n            <label htmlFor={numberId}>\n                Number\n                <input\n                    className={s.phoneInputNumber}\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    value={number}\n                    onChange={handleChange}\n                    id={numberId}\n                    required\n                />\n                </label>\n                <label html={familyId}>\n                    <input\n                    className={s.phoneInputLicence}\n                    value={family}\n                    type=\"checkbox\"\n                    name=\"family\"\n                    checked={family}\n                    onChange={handleChange}\n                    id={familyId}\n                    />\n                    <span className={s.licenceText}>If family contact</span>\n                </label>\n\n                <button type='submit' className={s.phoneFormButton}>Add contact</button>\n            </form>\n    )\n}\n\nexport default ContactForm;\n\nContactForm.defaultProps = {\n    onSubmit: () => {}\n}\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func,\n}","import {memo} from \"react\";\nimport PropTypes from 'prop-types';\n\nimport s from \"./contactList.module.css\"\n\nconst ContactListItem = ({id, name, number, removeContact}) => {\n    return (\n        <li className={s.phonebookListItem}>\n            {name}: {number}\n            <button className={s.phonebookListButton} type='button' onClick={() => removeContact(id)}>Delete</button>\n        </li>\n    )\n}\n\nexport default memo(ContactListItem);\n\nContactListItem.defaultProps = {\n    id: \"\",\n    name: \"\",\n    number: \"\",\n    removeContact: () => {},\n}\n\nContactListItem.propTypes = {\n    removeContact: PropTypes.func,\n    name: PropTypes.string,\n    number: PropTypes.string,\n    id: PropTypes.string,\n}","import PropTypes from 'prop-types';\nimport ContactListItem from \"./ContactListItem\"\nimport s from \"./contactList.module.css\"\n\nconst ContactList = ({items, removeContact}) => {\n    const elements = items.map(item => <ContactListItem key={item.id} {...item} removeContact={removeContact} />);\n\n    return (<>\n        <h4 className={s.title}>Contacts list:</h4>\n        <ol>\n            {elements}\n        </ol>\n    </>\n    )\n}\nexport default ContactList;\n\nContactList.defaultProps = {\n    items: [],\n    removeContact: () => {},\n}\n\nContactList.propTypes = {\n    removeContact: PropTypes.func,\n    items: PropTypes.arrayOf(PropTypes.shape({\n        nameId: PropTypes.string,\n        numberId: PropTypes.string,\n        familyId: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n        family: PropTypes.bool,\n        id: PropTypes.string,\n        })\n    ),\n}","export const getFilter = ({filter}) => filter;","import {useEffect} from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Loader from \"components/Loader/Loader\";\n\nimport { fetchContacts, addContact, removeContact } from \"../../redux/contacts/items/items-operations\";\nimport {setFilter} from \"../../redux/contacts/filter/filter-actions\";\n\nimport { getFilteredContacts, getState } from \"../../redux/contacts/items/items-selectors\";\nimport {getFilter} from \"../../redux/contacts/filter/filter-selectors\";\n\nimport PropTypes from 'prop-types';\nimport s from \"./ContactList/contactList.module.css\"\n\nexport const Phonebook = () => {\n    const contacts = useSelector(getFilteredContacts);\n    const {loading, error} = useSelector(getState);\n    const filter = useSelector(getFilter);\n\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(fetchContacts())\n    }, [dispatch])\n\n    const onAddContact = data => {\n        const action = addContact(data);\n        dispatch(action)\n    };\n\n    const onRemoveContact = id => {\n        dispatch(removeContact(id));\n    };\n\n    const handleFilter = ({target}) => {\n        dispatch(setFilter(target.value));\n    }\n\n    let errorText = '';\n    if(error && error.message === \"Please authenticate\") {\n        errorText = `Something went wrong :-( ${error.message}`;\n    }\n\n    return (\n        <div className={s.phonebook}>\n            <h2 className={s.phonebookTitle}>Add contact</h2>\n            <ContactForm onSubmit={onAddContact} />\n            <h2 className={s.phonebookTitle}>Contacts</h2>\n                <div className={s.contact}>\n                    <input value={filter} name=\"filter\" onChange={handleFilter} className={s.contactInput} placeholder=\"Filter contacts\" />\n                    {loading && <Loader className={s.loader}/>}\n                    <div className={s.contactListBlock}>\n                    {!loading && contacts.length > 0 && <ContactList items={contacts} removeContact={onRemoveContact}/>}\n                    </div>\n                    {error && <p className={s.errorText}>{errorText}</p>}\n                </div>\n        </div>\n    )\n}\n\nexport default Phonebook;\n\nPhonebook.defaultProps = {\n    getFilteredContacts: () => {},\n    getFilter: () => {},\n    data: {},\n    id: \"\",\n}\n\nPhonebook.propTypes = {\n    getFilteredContacts: PropTypes.func,\n    getFilter: PropTypes.func,\n    target: PropTypes.object,\n    id: PropTypes.string,\n    data: PropTypes.shape({\n        nameId: PropTypes.string,\n        numberId: PropTypes.string,\n        familyId: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n        family: PropTypes.bool,\n        }),\n}","import Phonebook from \"../../components/Phonebook/Phonebook\"\n\n\nconst PhonebookPage = () => {\n    return (\n        <div>\n            <Phonebook />\n        </div>\n    )\n}\n\nexport default PhonebookPage;","export const getContacts = ({contacts}) => contacts.items;\nexport const getState = ({contacts}) => ({loading: contacts.loading, error: contacts.error});\nexport const getFamilyContacts = ({contacts}) => contacts.items.filter(({family}) => family);\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n    if(!filter) {\n        return contacts.items;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({name, number}) => {\n        const normalizedName = name.toLowerCase();\n        const normalizedNumber = number.toLowerCase();\n        return (normalizedName.includes(normalizedFilter) || normalizedNumber.includes(normalizedFilter));\n    });\n\n    return result;\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"contactList_phonebook__Ekg2i\",\"phonebookTitle\":\"contactList_phonebookTitle__fYbgA\",\"phonebookList\":\"contactList_phonebookList__NBcO4\",\"phonebookListItem\":\"contactList_phonebookListItem__zsiCr\",\"phonebookListButton\":\"contactList_phonebookListButton__gBbI+\",\"contact\":\"contactList_contact__YILiK\",\"contactInput\":\"contactList_contactInput__VdnXO\",\"title\":\"contactList_title__LOOxb\",\"contactListBlock\":\"contactList_contactListBlock__xlCoZ\",\"errorText\":\"contactList_errorText__gOjbM\",\"loginform\":\"contactList_loginform__XmKFg\"};"],"names":["useForm","initialState","onSubmit","useState","state","setState","handleChange","target","value","name","type","checked","newValue","prevState","handleSubmit","e","preventDefault","defaultProps","propTypes","PropTypes","number","family","ContactForm","nameId","useMemo","shortid","numberId","familyId","className","s","htmlFor","pattern","title","onChange","id","required","html","ContactListItem","removeContact","onClick","memo","ContactList","items","elements","map","item","getFilter","filter","Phonebook","contacts","useSelector","getFilteredContacts","getState","loading","error","dispatch","useDispatch","useEffect","fetchContacts","errorText","message","data","action","addContact","setFilter","placeholder","Loader","length","getFamilyContacts","normalizedFilter","toLowerCase","normalizedName","normalizedNumber","includes","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","unique","split","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}