{"version":3,"file":"static/js/743.0af8f622.chunk.js","mappings":"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","sources":["components/Phonebook/ContactForm/useForm.js","pages/Register/userInitialState.js","pages/Register/RegisterForm.jsx","pages/Register/Register.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","webpack://react-homework-template/./src/components/Phonebook/ContactList/contactList.module.css?239b","webpack://react-homework-template/./src/pages/Register/RegisterForm.module.css?4298"],"sourcesContent":["import {useState} from \"react\";\nimport PropTypes from 'prop-types';\n\nconst useForm = ({initialState, onSubmit}) => {\n    const [state, setState] = useState({...initialState});\n\n    const handleChange = ({target}) => {\n        const {value, name, type, checked} = target;\n        const newValue = type === \"checkbox\" ? checked : value;\n        setState(prevState => ({\n            ...prevState,\n            [name]: newValue,\n        }))\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        onSubmit({...state});\n        setState({...initialState});\n    };\n    return {state, setState, handleChange, handleSubmit}\n}\n\nexport default useForm;\n\nuseForm.defaultProps = {\n    onSubmit: () => {},\n}\n\nuseForm.propTypes = {\n    onSubmit: PropTypes.func,\n    target: PropTypes.object,\n}","const initialState = {\n    name: '',\n    email: '',\n    password: '',\n}\n\nexport default initialState;","import { useMemo } from \"react\";\nimport initialState from \"./userInitialState\";\nimport useForm from '../../components/Phonebook/ContactForm/useForm';\nimport shortid from \"shortid\";\nimport PropTypes from 'prop-types';\n\nimport s from \"./RegisterForm.module.css\";\n\nconst RegisterForm = ({onSubmit}) => {\n\n    const {state, handleChange, handleSubmit} = useForm({initialState, onSubmit});\n\n    const userNameId = useMemo(()=> shortid(), []);\n    const userEmailId = useMemo(()=> shortid(), []);\n    const userPasswordId = useMemo(()=> shortid(), []);\n\n    const {name, email, password} = state;\n\n    \n    return (\n        <form onSubmit={handleSubmit} className={s.userForm}>\n            <h2>Registration</h2>\n            <label htmlFor={userNameId}>\n                User name\n                <input\n                    className={s.userInputName}\n                    type=\"text\"\n                    name=\"name\"\n                    size=\"20\" \n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    value={name}\n                    onChange={handleChange}\n                    id={userNameId}\n                    placeholder=\"Your Name\"\n                    required\n                />\n            </label>\n\n            <label htmlFor={userEmailId}>\n                Email\n                <input\n                    className={s.userInputEmail}\n                    type=\"email\"\n                    name=\"email\"\n                    pattern=\"[a-zA-Z0-9!#$%&'*+\\/=?^_`{|}~.-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*\"\n                    title=\"\"\n                    value={email}\n                    onChange={handleChange}\n                    id={userEmailId}\n                    placeholder = \"Your Email address\"\n                    required\n                />\n            </label>\n                \n            <label htmlFor={userPasswordId}>\n                Password\n                <input\n                    className={s.userInputPassword}\n                    type=\"password\" \n                    name=\"password\"\n                    size=\"20\" \n                    title=\"\"\n                    value={password}\n                    onChange={handleChange}\n                    id={userPasswordId}\n                    autoComplete=\"off\"\n                    placeholder = \"Enter your password\"\n                    required\n                />\n            </label>\n\n            <button type='submit' className={s.phoneFormButton}>Register</button>\n        </form>\n\n    )\n}\n\nexport default RegisterForm;\n\nRegisterForm.defaultProps = {\n    onSubmit: () => {},\n    initialState: {},\n}\n\nRegisterForm.propTypes = {\n    onSubmit: PropTypes.func,\n    initialState: PropTypes.shape({\n        password: PropTypes.string,\n        email: PropTypes.string,\n        }),    \n}","import { useSelector, useDispatch } from \"react-redux\";\n\nimport RegisterForm from \"./RegisterForm\";\n\nimport { register } from \"../../redux/auth/auth-operations\";\nimport  authSelectors  from \"../../redux/auth/auth-selectors\"\n\nimport s from \"../../components/Phonebook/ContactList/contactList.module.css\"\n\nimport PropTypes from 'prop-types';\n\nexport const Register = () => {\n    const dispatch = useDispatch();\n    const error = useSelector(authSelectors.getStateError);\n\n    const onAddUser = store => {\n        const action = register(store);\n        dispatch(action)\n    };\n\n    let errorText = '';\n    if(error) {\n        errorText = `Something went wrong, please try again`;\n    }\n\n    return (\n        <div className={s.loginform}>\n        <RegisterForm onSubmit={onAddUser} />\n        {error && <p className={s.errorText}>{errorText}</p>}\n        </div>\n    )\n}\n\nexport default Register;\n\nRegister.defaultProps = {\n    error: () => {},\n}\n\nRegister.propTypes = {\n    error: PropTypes.func,\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"contactList_phonebook__Ekg2i\",\"phonebookTitle\":\"contactList_phonebookTitle__fYbgA\",\"phonebookList\":\"contactList_phonebookList__NBcO4\",\"phonebookListItem\":\"contactList_phonebookListItem__zsiCr\",\"phonebookListButton\":\"contactList_phonebookListButton__gBbI+\",\"contact\":\"contactList_contact__YILiK\",\"contactInput\":\"contactList_contactInput__VdnXO\",\"title\":\"contactList_title__LOOxb\",\"contactListBlock\":\"contactList_contactListBlock__xlCoZ\",\"errorText\":\"contactList_errorText__gOjbM\",\"loginform\":\"contactList_loginform__XmKFg\"};","// extracted by mini-css-extract-plugin\nexport default {\"userForm\":\"RegisterForm_userForm__IXhXL\",\"userInputName\":\"RegisterForm_userInputName__YX2u-\",\"userInputEmail\":\"RegisterForm_userInputEmail__O1znj\",\"userInputPassword\":\"RegisterForm_userInputPassword__7UcHs\",\"phoneFormButton\":\"RegisterForm_phoneFormButton__KtVh2\"};"],"names":["useForm","initialState","onSubmit","useState","state","setState","handleChange","target","value","name","type","checked","newValue","prevState","handleSubmit","e","preventDefault","defaultProps","propTypes","PropTypes","email","password","RegisterForm","userNameId","useMemo","shortid","userEmailId","userPasswordId","className","s","htmlFor","size","pattern","title","onChange","id","placeholder","required","autoComplete","Register","dispatch","useDispatch","error","useSelector","authSelectors","errorText","store","action","register","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","alphabet","previousSeed","shuffled","randomFromSeed","ORIGINAL","reset","setCharacters","_alphabet_","length","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}